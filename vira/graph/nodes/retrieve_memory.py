import numpy as np
from openai import AzureOpenAI
from typing import Dict, Any, List, Tuple

from vira.graph.state import ViraState
from vira.db.repository import MemoryRepository
from vira.config import settings
from vira.utils.logger import get_logger
from datetime import datetime

logger = get_logger(__name__)


def get_openai_client() -> AzureOpenAI:
    """Azure OpenAI istemcisini baÅŸlatÄ±r."""
    return AzureOpenAI(
        api_key=settings.AZURE_OPENAI_API_KEY,
        api_version=settings.AZURE_OPENAI_API_VERSION,
        azure_endpoint=settings.AZURE_OPENAI_ENDPOINT,
    )


def create_embedding(text: str, client: AzureOpenAI) -> List[float]:
    """Verilen metin iÃ§in bir Azure OpenAI embedding'i oluÅŸturur."""
    embedding_model = settings.AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME
    if not embedding_model:
        raise ValueError("YapÄ±landÄ±rma hatasÄ±: AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME ayarÄ± .env dosyasÄ±nda eksik.")

    response = client.embeddings.create(input=text, model=embedding_model)
    return response.data[0].embedding


def retrieve_memory_node(state: ViraState) -> ViraState:
    """
    KullanÄ±cÄ±nÄ±n mesajÄ±na benzer anÄ±larÄ± ve son konuÅŸmalarÄ± veritabanÄ±ndan alÄ±r.

    Ä°ki tÃ¼r hafÄ±za birleÅŸtirilir:
    1. Uzun SÃ¼reli HafÄ±za: pgvector ile benzerlik aramasÄ± yapÄ±larak bulunan anÄ±lar
    2. KÄ±sa SÃ¼reli HafÄ±za: KullanÄ±cÄ±nÄ±n son 5 konuÅŸmasÄ± (kronolojik sÄ±rayla)

    State'e eklenen deÄŸerler:
    - memory_context: FormatlanmÄ±ÅŸ hafÄ±za metni
    - retrieved_memories: Benzer anÄ±larÄ±n listesi
    - recent_conversations: Son konuÅŸmalarÄ±n listesi

    Returns:
        ViraState: GÃ¼ncellenmiÅŸ state nesnesi
    """
    logger.info("--- DÃ¼ÄŸÃ¼m: retrieve_memory_node ---")

    user_id = state.get("user_id")
    query_text = state.get("original_message")
    session_id = state.get("session_id", "default_session")

    # BaÅŸlangÄ±Ã§ deÄŸerlerini ayarla
    state["memory_context"] = ""
    state["retrieved_memories"] = []
    state["recent_conversations"] = []

    # Girdi kontrolÃ¼
    if not user_id or not query_text:
        logger.warning("HafÄ±za almak iÃ§in user_id veya original_message eksik.")
        return state

    try:
        repo = MemoryRepository()
        client = get_openai_client()

        # 1. UZUN SÃœRELÄ° HAFIZA: Benzer anÄ±larÄ± al
        query_embedding = np.array(create_embedding(query_text, client))
        logger.debug("Sorgu embedding'i oluÅŸturuldu.")

        relevant_memories = repo.retrieve_similar_memories(
            user_id=user_id,
            embedding=query_embedding,
            top_k=5
        )
        state["retrieved_memories"] = relevant_memories

        # 2. YENÄ°: KISA SÃœRELÄ° HAFIZA: Son konuÅŸmalarÄ± al
        recent_conversations = repo.get_recent_conversations(
            user_id=user_id,
            session_id=session_id,
            limit=5
        )
        state["recent_conversations"] = recent_conversations

        # 3. HafÄ±za baÄŸlamÄ±nÄ± oluÅŸtur
        memory_context = ""
        # YapÄ±landÄ±rÄ±labilir benzerlik eÅŸiÄŸi
        threshold = getattr(settings, "MEMORY_SIMILARITY_THRESHOLD", 0.7)

        # 3.1 Uzun sÃ¼reli hafÄ±za formatlamasÄ±
        if relevant_memories:
            logger.info(f"{len(relevant_memories)} adet ilgili anÄ± bulundu.")
            memory_context = "ğŸ§  GeÃ§miÅŸten hatÄ±rladÄ±klarÄ±m:\n\n"

            sorted_memories = sorted(relevant_memories, key=lambda x: x[1], reverse=True)

            for i, (content, similarity, created_date) in enumerate(sorted_memories, 1):
                if similarity >= threshold:
                    formatted_date = created_date.strftime("%d/%m/%Y %H:%M")
                    memory_context += f'{i}. "{content.strip()}" (Benzerlik: {similarity * 100:.1f}%, Tarih: {formatted_date})\n'
        else:
            logger.info("Ä°lgili anÄ± bulunamadÄ±.")

        # 3.2 YENÄ°: KÄ±sa sÃ¼reli hafÄ±za formatlamasÄ±
        if recent_conversations:
            logger.info(f"{len(recent_conversations)} adet son konuÅŸma bulundu.")

            if memory_context:
                memory_context += "\n\n"

            memory_context += "ğŸ’¬ Son konuÅŸmalarÄ±mÄ±z:\n\n"

            for i, (message, response, created_at) in enumerate(recent_conversations, 1):
                formatted_date = created_at.strftime("%d/%m/%Y %H:%M")
                memory_context += f"{i}. Sen: {message.strip()}\n   Ben: {response.strip()}\n   ({formatted_date})\n\n"

        # 4. FormatlanmÄ±ÅŸ baÄŸlamÄ± state'e ekle
        state["memory_context"] = memory_context.strip()
        return state

    except Exception as e:
        logger.error(f"HafÄ±za alÄ±nÄ±rken hata oluÅŸtu: {e}", exc_info=True)
        # Hata durumunda bile tutarlÄ± bir state dÃ¶ndÃ¼r
        return state