#!/usr/bin/env python3
"""
Vira Streamlit - LangGraph tabanlÄ± web arayÃ¼zÃ¼
"""
import streamlit as st
import requests
import uuid
import os
from datetime import datetime

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="Vira AI Asistan",
    page_icon="ğŸ¤–",
    layout="centered",
    initial_sidebar_state="expanded",
)

# Stil ekleme
st.markdown("""
<style>
.chat-message {
    padding: 1.5rem; 
    border-radius: 0.5rem; 
    margin-bottom: 1rem; 
    display: flex;
    align-items: center;
}
.chat-message.user {
    background-color: #2b313e;
}
.chat-message.assistant {
    background-color: #475063;
}
.chat-message .avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 1rem;
}
.chat-message .message {
    flex-grow: 1;
}
</style>
""", unsafe_allow_html=True)

# API URL (deÄŸiÅŸtirebilirsiniz)
API_URL = os.getenv("VIRA_API_URL", "http://localhost:8000")

# Oturum durumunu baÅŸlat
if "messages" not in st.session_state:
    st.session_state.messages = []

if "user_id" not in st.session_state:
    st.session_state.user_id = str(uuid.uuid4())

# BaÅŸlÄ±k
st.title("Vira AI Asistan ğŸ¤–")

# Sidebar
with st.sidebar:
    st.header("HakkÄ±nda")
    st.info("""
    **Vira AI Asistan**
    
    Vira, uzun sÃ¼reli hafÄ±zasÄ± olan, LangGraph tabanlÄ± bir yapay zeka asistanÄ±dÄ±r.
    
    Ã–zellikler:
    - Uzun sÃ¼reli hafÄ±za
    - Duygu analizi
    - Omega protokolÃ¼
    """)
    
    st.header("Ayarlar")
    if st.button("Yeni Oturum"):
        st.session_state.user_id = str(uuid.uuid4())
        st.session_state.messages = []
        st.success("Yeni oturum baÅŸlatÄ±ldÄ±!")
    
    st.text(f"Oturum ID: {st.session_state.user_id[:8]}...")
    
    st.header("BaÄŸlantÄ±")
    api_url = st.text_input("API URL", value=API_URL)
    
    # API saÄŸlÄ±k kontrolÃ¼
    try:
        response = requests.get(f"{api_url}/health", timeout=2)
        if response.status_code == 200:
            st.success("API baÄŸlantÄ±sÄ± kuruldu âœ…")
        else:
            st.error(f"API hatasÄ±: {response.status_code}")
    except Exception as e:
        st.error(f"API baÄŸlantÄ±sÄ± kurulamadÄ±: {e}")

# MesajlarÄ± gÃ¶ster
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# KullanÄ±cÄ± giriÅŸi
prompt = st.chat_input("Vira ile konuÅŸmak iÃ§in bir ÅŸeyler yazÄ±n...")

if prompt:
    # KullanÄ±cÄ± mesajÄ±nÄ± gÃ¶ster
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # MesajÄ± kaydet
    st.session_state.messages.append({"role": "user", "content": prompt})
    
    # API'ye istek gÃ¶nder
    with st.spinner("Vira dÃ¼ÅŸÃ¼nÃ¼yor..."):
        try:
            response = requests.post(
                f"{api_url}/chat",
                json={"user_id": st.session_state.user_id, "message": prompt},
                timeout=60
            )
            
            if response.status_code == 200:
                ai_response = response.json()["response"]
                memory_context = response.json().get("memory_context", "")
                
                # Asistan yanÄ±tÄ±nÄ± gÃ¶ster
                with st.chat_message("assistant"):
                    st.markdown(ai_response)
                
                # YanÄ±tÄ± kaydet
                st.session_state.messages.append({"role": "assistant", "content": ai_response})
                
                # EÄŸer hafÄ±za baÄŸlamÄ± varsa, bunu expander iÃ§inde gÃ¶ster
                if memory_context:
                    with st.expander("HafÄ±za BaÄŸlamÄ±"):
                        st.markdown(memory_context)
            else:
                st.error(f"API hatasÄ±: {response.status_code} - {response.text}")
        
        except Exception as e:
            st.error(f"Ä°stek sÄ±rasÄ±nda hata oluÅŸtu: {e}")

# Footer
st.markdown("---")
st.markdown(f"Â© {datetime.now().year} Vira AI | LangGraph tabanlÄ± AI Asistan")